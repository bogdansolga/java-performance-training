logging:
  level:
    root: info
    org:
      apache: warn
      springframework: warn

  pattern:
    # special characters need to be escaped / quoted
    console: '%clr([%thread] [%date{HH:mm:ss.SSS}]){faint} %clr(%2p) %clr(%-40.40logger{36}){cyan} %m%n%wex'

server:
  tomcat:
    threads:
      max: 10
      min-spare: 2

spring:
  datasource:
    driver-class-name: oracle.jdbc.driver.OracleDriver
    url: jdbc:oracle:thin:@localhost:1521:xe
    username: SYSTEM
    password: dbpassword

  jackson:
    serialization:
      INDENT_OUTPUT : true

  jpa:
    hibernate:
      ddl-auto: none # replace with 'create' for the first execution
    properties:
      hibernate:
        show_sql: false
        format_sql: true
    database-platform: org.hibernate.dialect.OracleDialect

  jmx:
    default-domain: ' net.safedata.performance.training'

execution:
  time:
    tracing: true

# Register P6LogFactory to log JDBC events
  decorator.datasource.p6spy.enable-logging: true
  # Use com.p6spy.engine.spy.appender.MultiLineFormat instead of com.p6spy.engine.spy.appender.SingleLineFormat
  decorator.datasource.p6spy.multiline: true
  # Use logging for default listeners [slf4j, sysout, file, custom]
  decorator.datasource.p6spy.logging: slf4j
  # Log file to use (only with logging=file)
  decorator.datasource.p6spy.log-file: spy.log
  # Class file to use (only with logging=custom). The class must implement com.p6spy.engine.spy.appender.FormattedLogger
  # decorator.datasource.p6spy.custom-appender-class=my.custom.LoggerClass
  # Custom log format, if specified com.p6spy.engine.spy.appender.CustomLineFormat will be used with this log format
  #decorator.datasource.p6spy.log-format:
  # Use regex pattern to filter log messages. If specified only matched messages will be logged.
  #decorator.datasource.p6spy.log-filter.pattern=